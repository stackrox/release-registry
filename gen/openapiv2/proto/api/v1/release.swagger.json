{
  "swagger": "2.0",
  "info": {
    "title": "proto/api/v1/release.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "ReleaseService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/find": {
      "get": {
        "summary": "FindLatest returns the latest release for a given query.",
        "operationId": "ReleaseService_FindLatest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReleaseServiceFindLatestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "prefix",
            "description": "Prefix of the release tag.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "qualityMilestoneName",
            "description": "Name of a quality milestone that a release must have passed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ignoredReleaseKinds",
            "description": "List of release kinds to ignore in sorting.\n\n - RELEASE_KIND_INVALID_UNSPECIFIED: Invalid or unspecified kind.\n - RELEASE_KIND_DEVELOPMENT: Development (untagged) kind.\n - RELEASE_KIND_RC: Release candidate kind.\n - RELEASE_KIND_RELEASE: Release kind.\n - RELEASE_KIND_NIGHTLY: Nightly build kind.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "RELEASE_KIND_INVALID_UNSPECIFIED",
                "RELEASE_KIND_DEVELOPMENT",
                "RELEASE_KIND_RC",
                "RELEASE_KIND_RELEASE",
                "RELEASE_KIND_NIGHTLY"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "preload",
            "description": "Whether to include release metadata and associated quality milestones in the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeRejected",
            "description": "Whether to include rejected releases in the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ReleaseService"
        ]
      }
    },
    "/v1/release": {
      "get": {
        "summary": "List returns all tracked releases.",
        "operationId": "ReleaseService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReleaseServiceListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "prefix",
            "description": "Prefix of the release tag.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "qualityMilestoneName",
            "description": "Name of a quality milestone that a release must have passed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ignoredReleaseKinds",
            "description": "List of release kinds to ignore in output.\n\n - RELEASE_KIND_INVALID_UNSPECIFIED: Invalid or unspecified kind.\n - RELEASE_KIND_DEVELOPMENT: Development (untagged) kind.\n - RELEASE_KIND_RC: Release candidate kind.\n - RELEASE_KIND_RELEASE: Release kind.\n - RELEASE_KIND_NIGHTLY: Nightly build kind.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "RELEASE_KIND_INVALID_UNSPECIFIED",
                "RELEASE_KIND_DEVELOPMENT",
                "RELEASE_KIND_RC",
                "RELEASE_KIND_RELEASE",
                "RELEASE_KIND_NIGHTLY"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "preload",
            "description": "Whether to include release metadata and associated quality milestones in the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeRejected",
            "description": "Whether to include rejected releases in the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ReleaseService"
        ]
      },
      "post": {
        "summary": "Create creates a new release.",
        "operationId": "ReleaseService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReleaseServiceCreateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ReleaseServiceCreateRequest"
            }
          }
        ],
        "tags": [
          "ReleaseService"
        ]
      }
    },
    "/v1/release/{tag}": {
      "get": {
        "summary": "Get returns a release identified by its tag.",
        "operationId": "ReleaseService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReleaseServiceGetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tag",
            "description": "Unique tag.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "preload",
            "description": "Whether to include release metadata and associated quality milestones in the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeRejected",
            "description": "Whether to include rejected releases in the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ReleaseService"
        ]
      },
      "patch": {
        "summary": "Update updates the metadata for a release identified by its tag.",
        "operationId": "ReleaseService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReleaseServiceUpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tag",
            "description": "Unique tag to identify the release.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ReleaseService"
        ]
      }
    },
    "/v1/release/{tag}/approve": {
      "post": {
        "summary": "Approve approves a release identified by its tag for a quality milestone.",
        "operationId": "ReleaseService_Approve",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReleaseServiceApproveResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tag",
            "description": "Unique tag.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "qualityMilestoneDefinitionName": {
                  "type": "string",
                  "description": "Name of a quality milestone definition that the release shall be marked as passed for."
                },
                "metadata": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1QualityMilestoneMetadata"
                  },
                  "description": "List of metadata associated with the quality milestone."
                }
              },
              "description": "Represents a request to approve a release for a quality milestone."
            }
          }
        ],
        "tags": [
          "ReleaseService"
        ]
      }
    },
    "/v1/release/{tag}/reject": {
      "post": {
        "summary": "Reject marks a release identified by its tag as rejected.",
        "operationId": "ReleaseService_Reject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReleaseServiceRejectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tag",
            "description": "Unique tag.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "preload": {
                  "type": "boolean",
                  "description": "Whether to include release metadata and associated quality milestones in the response."
                }
              },
              "description": "Represents a request to reject a release and hide it from results."
            }
          }
        ],
        "tags": [
          "ReleaseService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Meta": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Unique Id of the database object."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of creation."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of last update."
        }
      },
      "description": "Represents meta information that can be associated with releases, quality milestones and their definitions."
    },
    "v1QualityMilestone": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/v1Meta",
          "description": "Meta information like ID and timestamps."
        },
        "name": {
          "type": "string",
          "description": "Name of the quality milestone definition."
        },
        "approver": {
          "type": "string",
          "description": "Email address of actor who approved the quality milestone."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1QualityMilestoneMetadata"
          },
          "description": "List of metadata associated with the quality milestone."
        }
      },
      "description": "Represents a quality milestone."
    },
    "v1QualityMilestoneMetadata": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Unique key to identify the metadata."
        },
        "value": {
          "type": "string",
          "description": "Metadata value."
        }
      },
      "description": "Represents metadata for quality milestones."
    },
    "v1ReleaseKind": {
      "type": "string",
      "enum": [
        "RELEASE_KIND_INVALID_UNSPECIFIED",
        "RELEASE_KIND_DEVELOPMENT",
        "RELEASE_KIND_RC",
        "RELEASE_KIND_RELEASE",
        "RELEASE_KIND_NIGHTLY"
      ],
      "default": "RELEASE_KIND_INVALID_UNSPECIFIED",
      "description": "Represents kind of releases.\n\n - RELEASE_KIND_INVALID_UNSPECIFIED: Invalid or unspecified kind.\n - RELEASE_KIND_DEVELOPMENT: Development (untagged) kind.\n - RELEASE_KIND_RC: Release candidate kind.\n - RELEASE_KIND_RELEASE: Release kind.\n - RELEASE_KIND_NIGHTLY: Nightly build kind."
    },
    "v1ReleaseMetadata": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Unique key to identify the metadata."
        },
        "value": {
          "type": "string",
          "description": "Metadata value."
        }
      },
      "description": "Represents metadata for releases."
    },
    "v1ReleaseServiceApproveResponse": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/v1Meta",
          "description": "Meta information like ID and timestamps."
        },
        "tag": {
          "type": "string",
          "description": "Unique tag."
        },
        "qualityMilestoneDefinitionName": {
          "type": "string",
          "description": "Name of a quality milestone definition that the release has been marked as passed for."
        },
        "approver": {
          "type": "string",
          "description": "Email address of actor who approved the quality milestone."
        },
        "kind": {
          "$ref": "#/definitions/v1ReleaseKind",
          "description": "Kind of the release."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1QualityMilestoneMetadata"
          },
          "description": "List of metadata associated with the quality milestone."
        }
      },
      "description": "Represents the response to the request to approve a release for a quality milestone."
    },
    "v1ReleaseServiceCreateRequest": {
      "type": "object",
      "properties": {
        "tag": {
          "type": "string",
          "description": "Unique tag to identify the release."
        },
        "commit": {
          "type": "string",
          "description": "Commit hash associated with the release tag."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ReleaseMetadata"
          },
          "description": "List of metadata associated with the release."
        }
      },
      "description": "Represents a create request for a release."
    },
    "v1ReleaseServiceCreateResponse": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/v1Meta",
          "description": "Meta information like ID and timestamps."
        },
        "tag": {
          "type": "string",
          "description": "Unique tag."
        },
        "commit": {
          "type": "string",
          "description": "Commit hash associated with the release tag."
        },
        "creator": {
          "type": "string",
          "description": "Email address of actor who created the release."
        },
        "kind": {
          "$ref": "#/definitions/v1ReleaseKind",
          "description": "Kind of the release."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ReleaseMetadata"
          },
          "description": "List of metadata associated with the release."
        }
      },
      "description": "Represents the response to the creation request for a release."
    },
    "v1ReleaseServiceFindLatestResponse": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/v1Meta",
          "description": "Meta information like ID and timestamps."
        },
        "tag": {
          "type": "string",
          "description": "Unique tag."
        },
        "commit": {
          "type": "string",
          "description": "Commit hash associated with the release tag."
        },
        "creator": {
          "type": "string",
          "description": "Email address of actor who created the release."
        },
        "kind": {
          "$ref": "#/definitions/v1ReleaseKind",
          "description": "Kind of the release."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ReleaseMetadata"
          },
          "description": "List of metadata associated with the release."
        },
        "qualityMilestones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1QualityMilestone"
          },
          "description": "List of quality milestones that the release has passed."
        },
        "rejected": {
          "type": "boolean",
          "description": "Whether the release is rejected."
        }
      },
      "description": "Represents the response with the latest release for given search criteria."
    },
    "v1ReleaseServiceGetResponse": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/v1Meta",
          "description": "Meta information like ID and timestamps."
        },
        "tag": {
          "type": "string",
          "description": "Unique tag."
        },
        "commit": {
          "type": "string",
          "description": "Commit hash associated with the release tag."
        },
        "creator": {
          "type": "string",
          "description": "Email address of actor who created the release."
        },
        "kind": {
          "$ref": "#/definitions/v1ReleaseKind",
          "description": "Kind of the release."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ReleaseMetadata"
          },
          "description": "List of metadata associated with the release."
        },
        "qualityMilestones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1QualityMilestone"
          },
          "description": "List of quality milestones that the release has passed."
        },
        "rejected": {
          "type": "boolean",
          "description": "Whether the release is rejected."
        }
      },
      "description": "Represents the response to a get request for a specific release."
    },
    "v1ReleaseServiceListResponse": {
      "type": "object",
      "properties": {
        "releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ReleaseServiceGetResponse"
          },
          "description": "List of releases."
        }
      },
      "description": "Represents the response to list all releases matching the requested search criteria."
    },
    "v1ReleaseServiceRejectResponse": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/v1Meta",
          "description": "Meta information like ID and timestamps."
        },
        "tag": {
          "type": "string",
          "description": "Unique tag."
        },
        "commit": {
          "type": "string",
          "description": "Commit hash associated with the release tag."
        },
        "creator": {
          "type": "string",
          "description": "Email address of actor who created the release."
        },
        "kind": {
          "$ref": "#/definitions/v1ReleaseKind",
          "description": "Kind of the release."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ReleaseMetadata"
          },
          "description": "List of metadata associated with the release."
        },
        "rejected": {
          "type": "boolean",
          "description": "Rejection status of the release."
        }
      },
      "description": "Represents the response to the request to reject a release."
    },
    "v1ReleaseServiceUpdateResponse": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/v1Meta",
          "description": "Meta information like ID and timestamps."
        },
        "tag": {
          "type": "string",
          "description": "Unique tag."
        },
        "commit": {
          "type": "string",
          "description": "Commit hash associated with the release tag."
        },
        "creator": {
          "type": "string",
          "description": "Email address of actor who created the release."
        },
        "kind": {
          "$ref": "#/definitions/v1ReleaseKind",
          "description": "Kind of the release."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ReleaseMetadata"
          },
          "description": "List of metadata associated with the release."
        },
        "qualityMilestones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1QualityMilestone"
          },
          "description": "List of quality milestones that the release has passed."
        },
        "rejected": {
          "type": "boolean",
          "description": "Whether the release is rejected."
        }
      },
      "description": "Represents the response to the update request for a release."
    }
  }
}
