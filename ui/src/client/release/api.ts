/* tslint:disable */
/* eslint-disable */
/**
 * proto/api/v1/release.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
  [key: string]: object | any;

  /**
   *
   * @type {string}
   * @memberof ProtobufAny
   */
  '@type'?: string;
}
/**
 *
 * @export
 * @interface ReleaseServiceApproveRequest
 */
export interface ReleaseServiceApproveRequest {
  /**
   *
   * @type {string}
   * @memberof ReleaseServiceApproveRequest
   */
  qualityMilestoneDefinitionName?: string;
  /**
   *
   * @type {Array<V1QualityMilestoneMetadata>}
   * @memberof ReleaseServiceApproveRequest
   */
  metadata?: Array<V1QualityMilestoneMetadata>;
}
/**
 *
 * @export
 * @interface ReleaseServiceRejectRequest
 */
export interface ReleaseServiceRejectRequest {
  /**
   *
   * @type {boolean}
   * @memberof ReleaseServiceRejectRequest
   */
  preload?: boolean;
}
/**
 *
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
  /**
   *
   * @type {number}
   * @memberof RpcStatus
   */
  code?: number;
  /**
   *
   * @type {string}
   * @memberof RpcStatus
   */
  message?: string;
  /**
   *
   * @type {Array<ProtobufAny>}
   * @memberof RpcStatus
   */
  details?: Array<ProtobufAny>;
}
/**
 *
 * @export
 * @interface V1Meta
 */
export interface V1Meta {
  /**
   *
   * @type {string}
   * @memberof V1Meta
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof V1Meta
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof V1Meta
   */
  updatedAt?: string;
}
/**
 *
 * @export
 * @interface V1QualityMilestone
 */
export interface V1QualityMilestone {
  /**
   *
   * @type {V1Meta}
   * @memberof V1QualityMilestone
   */
  meta?: V1Meta;
  /**
   *
   * @type {string}
   * @memberof V1QualityMilestone
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof V1QualityMilestone
   */
  approver?: string;
  /**
   *
   * @type {Array<V1QualityMilestoneMetadata>}
   * @memberof V1QualityMilestone
   */
  metadata?: Array<V1QualityMilestoneMetadata>;
}
/**
 *
 * @export
 * @interface V1QualityMilestoneMetadata
 */
export interface V1QualityMilestoneMetadata {
  /**
   *
   * @type {string}
   * @memberof V1QualityMilestoneMetadata
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof V1QualityMilestoneMetadata
   */
  value?: string;
}
/**
 *
 * @export
 * @interface V1ReleaseMetadata
 */
export interface V1ReleaseMetadata {
  /**
   *
   * @type {string}
   * @memberof V1ReleaseMetadata
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof V1ReleaseMetadata
   */
  value?: string;
}
/**
 *
 * @export
 * @interface V1ReleaseServiceApproveResponse
 */
export interface V1ReleaseServiceApproveResponse {
  /**
   *
   * @type {V1Meta}
   * @memberof V1ReleaseServiceApproveResponse
   */
  meta?: V1Meta;
  /**
   *
   * @type {string}
   * @memberof V1ReleaseServiceApproveResponse
   */
  tag?: string;
  /**
   *
   * @type {string}
   * @memberof V1ReleaseServiceApproveResponse
   */
  qualityMilestoneDefinitionName?: string;
  /**
   *
   * @type {string}
   * @memberof V1ReleaseServiceApproveResponse
   */
  approver?: string;
  /**
   *
   * @type {Array<V1QualityMilestoneMetadata>}
   * @memberof V1ReleaseServiceApproveResponse
   */
  metadata?: Array<V1QualityMilestoneMetadata>;
}
/**
 *
 * @export
 * @interface V1ReleaseServiceCreateRequest
 */
export interface V1ReleaseServiceCreateRequest {
  /**
   *
   * @type {string}
   * @memberof V1ReleaseServiceCreateRequest
   */
  tag?: string;
  /**
   *
   * @type {string}
   * @memberof V1ReleaseServiceCreateRequest
   */
  commit?: string;
  /**
   *
   * @type {Array<V1ReleaseMetadata>}
   * @memberof V1ReleaseServiceCreateRequest
   */
  metadata?: Array<V1ReleaseMetadata>;
}
/**
 *
 * @export
 * @interface V1ReleaseServiceCreateResponse
 */
export interface V1ReleaseServiceCreateResponse {
  /**
   *
   * @type {V1Meta}
   * @memberof V1ReleaseServiceCreateResponse
   */
  meta?: V1Meta;
  /**
   *
   * @type {string}
   * @memberof V1ReleaseServiceCreateResponse
   */
  tag?: string;
  /**
   *
   * @type {string}
   * @memberof V1ReleaseServiceCreateResponse
   */
  commit?: string;
  /**
   *
   * @type {string}
   * @memberof V1ReleaseServiceCreateResponse
   */
  creator?: string;
  /**
   *
   * @type {Array<V1ReleaseMetadata>}
   * @memberof V1ReleaseServiceCreateResponse
   */
  metadata?: Array<V1ReleaseMetadata>;
}
/**
 *
 * @export
 * @interface V1ReleaseServiceFindLatestResponse
 */
export interface V1ReleaseServiceFindLatestResponse {
  /**
   *
   * @type {V1Meta}
   * @memberof V1ReleaseServiceFindLatestResponse
   */
  meta?: V1Meta;
  /**
   *
   * @type {string}
   * @memberof V1ReleaseServiceFindLatestResponse
   */
  tag?: string;
  /**
   *
   * @type {string}
   * @memberof V1ReleaseServiceFindLatestResponse
   */
  commit?: string;
  /**
   *
   * @type {string}
   * @memberof V1ReleaseServiceFindLatestResponse
   */
  creator?: string;
  /**
   *
   * @type {Array<V1ReleaseMetadata>}
   * @memberof V1ReleaseServiceFindLatestResponse
   */
  metadata?: Array<V1ReleaseMetadata>;
  /**
   *
   * @type {Array<V1QualityMilestone>}
   * @memberof V1ReleaseServiceFindLatestResponse
   */
  qualityMilestones?: Array<V1QualityMilestone>;
  /**
   *
   * @type {boolean}
   * @memberof V1ReleaseServiceFindLatestResponse
   */
  rejected?: boolean;
}
/**
 *
 * @export
 * @interface V1ReleaseServiceGetResponse
 */
export interface V1ReleaseServiceGetResponse {
  /**
   *
   * @type {V1Meta}
   * @memberof V1ReleaseServiceGetResponse
   */
  meta?: V1Meta;
  /**
   *
   * @type {string}
   * @memberof V1ReleaseServiceGetResponse
   */
  tag?: string;
  /**
   *
   * @type {string}
   * @memberof V1ReleaseServiceGetResponse
   */
  commit?: string;
  /**
   *
   * @type {string}
   * @memberof V1ReleaseServiceGetResponse
   */
  creator?: string;
  /**
   *
   * @type {Array<V1ReleaseMetadata>}
   * @memberof V1ReleaseServiceGetResponse
   */
  metadata?: Array<V1ReleaseMetadata>;
  /**
   *
   * @type {Array<V1QualityMilestone>}
   * @memberof V1ReleaseServiceGetResponse
   */
  qualityMilestones?: Array<V1QualityMilestone>;
  /**
   *
   * @type {boolean}
   * @memberof V1ReleaseServiceGetResponse
   */
  rejected?: boolean;
}
/**
 *
 * @export
 * @interface V1ReleaseServiceListResponse
 */
export interface V1ReleaseServiceListResponse {
  /**
   *
   * @type {Array<V1ReleaseServiceGetResponse>}
   * @memberof V1ReleaseServiceListResponse
   */
  releases?: Array<V1ReleaseServiceGetResponse>;
}
/**
 *
 * @export
 * @interface V1ReleaseServiceRejectResponse
 */
export interface V1ReleaseServiceRejectResponse {
  /**
   *
   * @type {V1Meta}
   * @memberof V1ReleaseServiceRejectResponse
   */
  meta?: V1Meta;
  /**
   *
   * @type {string}
   * @memberof V1ReleaseServiceRejectResponse
   */
  tag?: string;
  /**
   *
   * @type {string}
   * @memberof V1ReleaseServiceRejectResponse
   */
  commit?: string;
  /**
   *
   * @type {string}
   * @memberof V1ReleaseServiceRejectResponse
   */
  creator?: string;
  /**
   *
   * @type {Array<V1ReleaseMetadata>}
   * @memberof V1ReleaseServiceRejectResponse
   */
  metadata?: Array<V1ReleaseMetadata>;
  /**
   *
   * @type {boolean}
   * @memberof V1ReleaseServiceRejectResponse
   */
  rejected?: boolean;
}

/**
 * ReleaseServiceApi - axios parameter creator
 * @export
 */
export const ReleaseServiceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Approve approves a Release identified by its tag for a QualityMilestone.
     * @param {string} tag
     * @param {ReleaseServiceApproveRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releaseServiceApprove: async (
      tag: string,
      body: ReleaseServiceApproveRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tag' is not null or undefined
      assertParamExists('releaseServiceApprove', 'tag', tag);
      // verify required parameter 'body' is not null or undefined
      assertParamExists('releaseServiceApprove', 'body', body);
      const localVarPath = `/v1/release/{tag}/approve`.replace(
        `{${'tag'}}`,
        encodeURIComponent(String(tag))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create creates a new Release.
     * @param {V1ReleaseServiceCreateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releaseServiceCreate: async (
      body: V1ReleaseServiceCreateRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('releaseServiceCreate', 'body', body);
      const localVarPath = `/v1/release`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary FindLatest returns the latest release for a given query.
     * @param {string} [prefix]
     * @param {string} [qualityMilestoneName]
     * @param {boolean} [preload]
     * @param {boolean} [includeRejected]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releaseServiceFindLatest: async (
      prefix?: string,
      qualityMilestoneName?: string,
      preload?: boolean,
      includeRejected?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/find`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (prefix !== undefined) {
        localVarQueryParameter['prefix'] = prefix;
      }

      if (qualityMilestoneName !== undefined) {
        localVarQueryParameter['qualityMilestoneName'] = qualityMilestoneName;
      }

      if (preload !== undefined) {
        localVarQueryParameter['preload'] = preload;
      }

      if (includeRejected !== undefined) {
        localVarQueryParameter['includeRejected'] = includeRejected;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get returns a Release identified by its tag.
     * @param {string} tag
     * @param {boolean} [preload]
     * @param {boolean} [includeRejected]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releaseServiceGet: async (
      tag: string,
      preload?: boolean,
      includeRejected?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tag' is not null or undefined
      assertParamExists('releaseServiceGet', 'tag', tag);
      const localVarPath = `/v1/release/{tag}`.replace(
        `{${'tag'}}`,
        encodeURIComponent(String(tag))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (preload !== undefined) {
        localVarQueryParameter['preload'] = preload;
      }

      if (includeRejected !== undefined) {
        localVarQueryParameter['includeRejected'] = includeRejected;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List returns all tracked Releases.
     * @param {string} [prefix]
     * @param {string} [qualityMilestoneName]
     * @param {boolean} [preload]
     * @param {boolean} [includeRejected]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releaseServiceList: async (
      prefix?: string,
      qualityMilestoneName?: string,
      preload?: boolean,
      includeRejected?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/release`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (prefix !== undefined) {
        localVarQueryParameter['prefix'] = prefix;
      }

      if (qualityMilestoneName !== undefined) {
        localVarQueryParameter['qualityMilestoneName'] = qualityMilestoneName;
      }

      if (preload !== undefined) {
        localVarQueryParameter['preload'] = preload;
      }

      if (includeRejected !== undefined) {
        localVarQueryParameter['includeRejected'] = includeRejected;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Reject marks a Release identified by its tag as rejected.
     * @param {string} tag
     * @param {ReleaseServiceRejectRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releaseServiceReject: async (
      tag: string,
      body: ReleaseServiceRejectRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tag' is not null or undefined
      assertParamExists('releaseServiceReject', 'tag', tag);
      // verify required parameter 'body' is not null or undefined
      assertParamExists('releaseServiceReject', 'body', body);
      const localVarPath = `/v1/release/{tag}/reject`.replace(
        `{${'tag'}}`,
        encodeURIComponent(String(tag))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ReleaseServiceApi - functional programming interface
 * @export
 */
export const ReleaseServiceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ReleaseServiceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Approve approves a Release identified by its tag for a QualityMilestone.
     * @param {string} tag
     * @param {ReleaseServiceApproveRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async releaseServiceApprove(
      tag: string,
      body: ReleaseServiceApproveRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ReleaseServiceApproveResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.releaseServiceApprove(
        tag,
        body,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Create creates a new Release.
     * @param {V1ReleaseServiceCreateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async releaseServiceCreate(
      body: V1ReleaseServiceCreateRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ReleaseServiceCreateResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.releaseServiceCreate(body, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary FindLatest returns the latest release for a given query.
     * @param {string} [prefix]
     * @param {string} [qualityMilestoneName]
     * @param {boolean} [preload]
     * @param {boolean} [includeRejected]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async releaseServiceFindLatest(
      prefix?: string,
      qualityMilestoneName?: string,
      preload?: boolean,
      includeRejected?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ReleaseServiceFindLatestResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.releaseServiceFindLatest(
        prefix,
        qualityMilestoneName,
        preload,
        includeRejected,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get returns a Release identified by its tag.
     * @param {string} tag
     * @param {boolean} [preload]
     * @param {boolean} [includeRejected]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async releaseServiceGet(
      tag: string,
      preload?: boolean,
      includeRejected?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ReleaseServiceGetResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.releaseServiceGet(
        tag,
        preload,
        includeRejected,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary List returns all tracked Releases.
     * @param {string} [prefix]
     * @param {string} [qualityMilestoneName]
     * @param {boolean} [preload]
     * @param {boolean} [includeRejected]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async releaseServiceList(
      prefix?: string,
      qualityMilestoneName?: string,
      preload?: boolean,
      includeRejected?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ReleaseServiceListResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.releaseServiceList(
        prefix,
        qualityMilestoneName,
        preload,
        includeRejected,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Reject marks a Release identified by its tag as rejected.
     * @param {string} tag
     * @param {ReleaseServiceRejectRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async releaseServiceReject(
      tag: string,
      body: ReleaseServiceRejectRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ReleaseServiceRejectResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.releaseServiceReject(
        tag,
        body,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ReleaseServiceApi - factory interface
 * @export
 */
export const ReleaseServiceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ReleaseServiceApiFp(configuration);
  return {
    /**
     *
     * @summary Approve approves a Release identified by its tag for a QualityMilestone.
     * @param {string} tag
     * @param {ReleaseServiceApproveRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releaseServiceApprove(
      tag: string,
      body: ReleaseServiceApproveRequest,
      options?: any
    ): AxiosPromise<V1ReleaseServiceApproveResponse> {
      return localVarFp
        .releaseServiceApprove(tag, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create creates a new Release.
     * @param {V1ReleaseServiceCreateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releaseServiceCreate(
      body: V1ReleaseServiceCreateRequest,
      options?: any
    ): AxiosPromise<V1ReleaseServiceCreateResponse> {
      return localVarFp
        .releaseServiceCreate(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary FindLatest returns the latest release for a given query.
     * @param {string} [prefix]
     * @param {string} [qualityMilestoneName]
     * @param {boolean} [preload]
     * @param {boolean} [includeRejected]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releaseServiceFindLatest(
      prefix?: string,
      qualityMilestoneName?: string,
      preload?: boolean,
      includeRejected?: boolean,
      options?: any
    ): AxiosPromise<V1ReleaseServiceFindLatestResponse> {
      return localVarFp
        .releaseServiceFindLatest(prefix, qualityMilestoneName, preload, includeRejected, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get returns a Release identified by its tag.
     * @param {string} tag
     * @param {boolean} [preload]
     * @param {boolean} [includeRejected]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releaseServiceGet(
      tag: string,
      preload?: boolean,
      includeRejected?: boolean,
      options?: any
    ): AxiosPromise<V1ReleaseServiceGetResponse> {
      return localVarFp
        .releaseServiceGet(tag, preload, includeRejected, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List returns all tracked Releases.
     * @param {string} [prefix]
     * @param {string} [qualityMilestoneName]
     * @param {boolean} [preload]
     * @param {boolean} [includeRejected]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releaseServiceList(
      prefix?: string,
      qualityMilestoneName?: string,
      preload?: boolean,
      includeRejected?: boolean,
      options?: any
    ): AxiosPromise<V1ReleaseServiceListResponse> {
      return localVarFp
        .releaseServiceList(prefix, qualityMilestoneName, preload, includeRejected, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Reject marks a Release identified by its tag as rejected.
     * @param {string} tag
     * @param {ReleaseServiceRejectRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releaseServiceReject(
      tag: string,
      body: ReleaseServiceRejectRequest,
      options?: any
    ): AxiosPromise<V1ReleaseServiceRejectResponse> {
      return localVarFp
        .releaseServiceReject(tag, body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ReleaseServiceApi - object-oriented interface
 * @export
 * @class ReleaseServiceApi
 * @extends {BaseAPI}
 */
export class ReleaseServiceApi extends BaseAPI {
  /**
   *
   * @summary Approve approves a Release identified by its tag for a QualityMilestone.
   * @param {string} tag
   * @param {ReleaseServiceApproveRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReleaseServiceApi
   */
  public releaseServiceApprove(
    tag: string,
    body: ReleaseServiceApproveRequest,
    options?: AxiosRequestConfig
  ) {
    return ReleaseServiceApiFp(this.configuration)
      .releaseServiceApprove(tag, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create creates a new Release.
   * @param {V1ReleaseServiceCreateRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReleaseServiceApi
   */
  public releaseServiceCreate(body: V1ReleaseServiceCreateRequest, options?: AxiosRequestConfig) {
    return ReleaseServiceApiFp(this.configuration)
      .releaseServiceCreate(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary FindLatest returns the latest release for a given query.
   * @param {string} [prefix]
   * @param {string} [qualityMilestoneName]
   * @param {boolean} [preload]
   * @param {boolean} [includeRejected]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReleaseServiceApi
   */
  public releaseServiceFindLatest(
    prefix?: string,
    qualityMilestoneName?: string,
    preload?: boolean,
    includeRejected?: boolean,
    options?: AxiosRequestConfig
  ) {
    return ReleaseServiceApiFp(this.configuration)
      .releaseServiceFindLatest(prefix, qualityMilestoneName, preload, includeRejected, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get returns a Release identified by its tag.
   * @param {string} tag
   * @param {boolean} [preload]
   * @param {boolean} [includeRejected]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReleaseServiceApi
   */
  public releaseServiceGet(
    tag: string,
    preload?: boolean,
    includeRejected?: boolean,
    options?: AxiosRequestConfig
  ) {
    return ReleaseServiceApiFp(this.configuration)
      .releaseServiceGet(tag, preload, includeRejected, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List returns all tracked Releases.
   * @param {string} [prefix]
   * @param {string} [qualityMilestoneName]
   * @param {boolean} [preload]
   * @param {boolean} [includeRejected]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReleaseServiceApi
   */
  public releaseServiceList(
    prefix?: string,
    qualityMilestoneName?: string,
    preload?: boolean,
    includeRejected?: boolean,
    options?: AxiosRequestConfig
  ) {
    return ReleaseServiceApiFp(this.configuration)
      .releaseServiceList(prefix, qualityMilestoneName, preload, includeRejected, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Reject marks a Release identified by its tag as rejected.
   * @param {string} tag
   * @param {ReleaseServiceRejectRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReleaseServiceApi
   */
  public releaseServiceReject(
    tag: string,
    body: ReleaseServiceRejectRequest,
    options?: AxiosRequestConfig
  ) {
    return ReleaseServiceApiFp(this.configuration)
      .releaseServiceReject(tag, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
